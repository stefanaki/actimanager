// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: internal/daemon/cpupinning/cpupinning.proto

package cpupinning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CpuPinning_ApplyPinning_FullMethodName  = "/CpuPinning/ApplyPinning"
	CpuPinning_RemovePinning_FullMethodName = "/CpuPinning/RemovePinning"
	CpuPinning_UpdatePinning_FullMethodName = "/CpuPinning/UpdatePinning"
)

// CpuPinningClient is the client API for CpuPinning service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpuPinningClient interface {
	ApplyPinning(ctx context.Context, in *ApplyPinningRequest, opts ...grpc.CallOption) (*Response, error)
	RemovePinning(ctx context.Context, in *RemovePinningRequest, opts ...grpc.CallOption) (*Response, error)
	UpdatePinning(ctx context.Context, in *UpdatePinningRequest, opts ...grpc.CallOption) (*Response, error)
}

type cpuPinningClient struct {
	cc grpc.ClientConnInterface
}

func NewCpuPinningClient(cc grpc.ClientConnInterface) CpuPinningClient {
	return &cpuPinningClient{cc}
}

func (c *cpuPinningClient) ApplyPinning(ctx context.Context, in *ApplyPinningRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CpuPinning_ApplyPinning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuPinningClient) RemovePinning(ctx context.Context, in *RemovePinningRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CpuPinning_RemovePinning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuPinningClient) UpdatePinning(ctx context.Context, in *UpdatePinningRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CpuPinning_UpdatePinning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpuPinningServer is the server API for CpuPinning service.
// All implementations must embed UnimplementedCpuPinningServer
// for forward compatibility
type CpuPinningServer interface {
	ApplyPinning(context.Context, *ApplyPinningRequest) (*Response, error)
	RemovePinning(context.Context, *RemovePinningRequest) (*Response, error)
	UpdatePinning(context.Context, *UpdatePinningRequest) (*Response, error)
	mustEmbedUnimplementedCpuPinningServer()
}

// UnimplementedCpuPinningServer must be embedded to have forward compatible implementations.
type UnimplementedCpuPinningServer struct {
}

func (UnimplementedCpuPinningServer) ApplyPinning(context.Context, *ApplyPinningRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPinning not implemented")
}
func (UnimplementedCpuPinningServer) RemovePinning(context.Context, *RemovePinningRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePinning not implemented")
}
func (UnimplementedCpuPinningServer) UpdatePinning(context.Context, *UpdatePinningRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePinning not implemented")
}
func (UnimplementedCpuPinningServer) mustEmbedUnimplementedCpuPinningServer() {}

// UnsafeCpuPinningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpuPinningServer will
// result in compilation errors.
type UnsafeCpuPinningServer interface {
	mustEmbedUnimplementedCpuPinningServer()
}

func RegisterCpuPinningServer(s grpc.ServiceRegistrar, srv CpuPinningServer) {
	s.RegisterService(&CpuPinning_ServiceDesc, srv)
}

func _CpuPinning_ApplyPinning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPinningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuPinningServer).ApplyPinning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpuPinning_ApplyPinning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuPinningServer).ApplyPinning(ctx, req.(*ApplyPinningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuPinning_RemovePinning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePinningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuPinningServer).RemovePinning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpuPinning_RemovePinning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuPinningServer).RemovePinning(ctx, req.(*RemovePinningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuPinning_UpdatePinning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePinningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuPinningServer).UpdatePinning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CpuPinning_UpdatePinning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuPinningServer).UpdatePinning(ctx, req.(*UpdatePinningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CpuPinning_ServiceDesc is the grpc.ServiceDesc for CpuPinning service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CpuPinning_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CpuPinning",
	HandlerType: (*CpuPinningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyPinning",
			Handler:    _CpuPinning_ApplyPinning_Handler,
		},
		{
			MethodName: "RemovePinning",
			Handler:    _CpuPinning_RemovePinning_Handler,
		},
		{
			MethodName: "UpdatePinning",
			Handler:    _CpuPinning_UpdatePinning_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/daemon/cpupinning/cpupinning.proto",
}
