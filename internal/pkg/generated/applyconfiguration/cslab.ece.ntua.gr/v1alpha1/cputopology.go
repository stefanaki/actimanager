/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// CpuTopologyApplyConfiguration represents an declarative configuration of the CpuTopology type for use
// with apply.
type CpuTopologyApplyConfiguration struct {
	Sockets   map[string]SocketApplyConfiguration   `json:"sockets,omitempty"`
	NumaNodes map[string]NumaNodeApplyConfiguration `json:"numaNodes,omitempty"`
	ListCpus  []int                                 `json:"listCpus,omitempty"`
}

// CpuTopologyApplyConfiguration constructs an declarative configuration of the CpuTopology type for use with
// apply.
func CpuTopology() *CpuTopologyApplyConfiguration {
	return &CpuTopologyApplyConfiguration{}
}

// WithSockets puts the entries into the Sockets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Sockets field,
// overwriting an existing map entries in Sockets field with the same key.
func (b *CpuTopologyApplyConfiguration) WithSockets(entries map[string]SocketApplyConfiguration) *CpuTopologyApplyConfiguration {
	if b.Sockets == nil && len(entries) > 0 {
		b.Sockets = make(map[string]SocketApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Sockets[k] = v
	}
	return b
}

// WithNumaNodes puts the entries into the NumaNodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NumaNodes field,
// overwriting an existing map entries in NumaNodes field with the same key.
func (b *CpuTopologyApplyConfiguration) WithNumaNodes(entries map[string]NumaNodeApplyConfiguration) *CpuTopologyApplyConfiguration {
	if b.NumaNodes == nil && len(entries) > 0 {
		b.NumaNodes = make(map[string]NumaNodeApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.NumaNodes[k] = v
	}
	return b
}

// WithListCpus adds the given value to the ListCpus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ListCpus field.
func (b *CpuTopologyApplyConfiguration) WithListCpus(values ...int) *CpuTopologyApplyConfiguration {
	for i := range values {
		b.ListCpus = append(b.ListCpus, values[i])
	}
	return b
}
