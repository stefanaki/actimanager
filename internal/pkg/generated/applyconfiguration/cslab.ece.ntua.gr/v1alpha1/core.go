/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// CoreApplyConfiguration represents an declarative configuration of the Core type for use
// with apply.
type CoreApplyConfiguration struct {
	Cpus     map[string]CpuApplyConfiguration `json:"cpus,omitempty"`
	ListCpus []int                            `json:"listCpus,omitempty"`
}

// CoreApplyConfiguration constructs an declarative configuration of the Core type for use with
// apply.
func Core() *CoreApplyConfiguration {
	return &CoreApplyConfiguration{}
}

// WithCpus puts the entries into the Cpus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Cpus field,
// overwriting an existing map entries in Cpus field with the same key.
func (b *CoreApplyConfiguration) WithCpus(entries map[string]CpuApplyConfiguration) *CoreApplyConfiguration {
	if b.Cpus == nil && len(entries) > 0 {
		b.Cpus = make(map[string]CpuApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Cpus[k] = v
	}
	return b
}

// WithListCpus adds the given value to the ListCpus field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ListCpus field.
func (b *CoreApplyConfiguration) WithListCpus(values ...int) *CoreApplyConfiguration {
	for i := range values {
		b.ListCpus = append(b.ListCpus, values[i])
	}
	return b
}
