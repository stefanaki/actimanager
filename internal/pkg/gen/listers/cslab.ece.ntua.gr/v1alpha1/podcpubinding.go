/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "cslab.ece.ntua.gr/actimanager/api/cslab.ece.ntua.gr/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodCpuBindingLister helps list PodCpuBindings.
// All objects returned here must be treated as read-only.
type PodCpuBindingLister interface {
	// List lists all PodCpuBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PodCpuBinding, err error)
	// PodCpuBindings returns an object that can list and get PodCpuBindings.
	PodCpuBindings(namespace string) PodCpuBindingNamespaceLister
	PodCpuBindingListerExpansion
}

// podCpuBindingLister implements the PodCpuBindingLister interface.
type podCpuBindingLister struct {
	indexer cache.Indexer
}

// NewPodCpuBindingLister returns a new PodCpuBindingLister.
func NewPodCpuBindingLister(indexer cache.Indexer) PodCpuBindingLister {
	return &podCpuBindingLister{indexer: indexer}
}

// List lists all PodCpuBindings in the indexer.
func (s *podCpuBindingLister) List(selector labels.Selector) (ret []*v1alpha1.PodCpuBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodCpuBinding))
	})
	return ret, err
}

// PodCpuBindings returns an object that can list and get PodCpuBindings.
func (s *podCpuBindingLister) PodCpuBindings(namespace string) PodCpuBindingNamespaceLister {
	return podCpuBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodCpuBindingNamespaceLister helps list and get PodCpuBindings.
// All objects returned here must be treated as read-only.
type PodCpuBindingNamespaceLister interface {
	// List lists all PodCpuBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PodCpuBinding, err error)
	// Get retrieves the PodCpuBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PodCpuBinding, error)
	PodCpuBindingNamespaceListerExpansion
}

// podCpuBindingNamespaceLister implements the PodCpuBindingNamespaceLister
// interface.
type podCpuBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodCpuBindings in the indexer for a given namespace.
func (s podCpuBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodCpuBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodCpuBinding))
	})
	return ret, err
}

// Get retrieves the PodCpuBinding from the indexer for a given namespace and name.
func (s podCpuBindingNamespaceLister) Get(name string) (*v1alpha1.PodCpuBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podcpubinding"), name)
	}
	return obj.(*v1alpha1.PodCpuBinding), nil
}
